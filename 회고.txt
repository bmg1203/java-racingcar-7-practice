프리코스를 진행하며 작성한 목표의 2% 정도를 달성했다고 생각합니다.
그 이유는 속도와 안정성을 동시에 고려하여 코드를 작성하는 기초 역량을 쌓기에는 아직 부족함을 느꼈기 때문입니다.
처음 목표는 효율적이면서도 안정적인 코드를 작성하는 것이었지만 이번주 프리코스를 통해 객체지향적 설계의 중요성과 단일 책임 원칙 기능 분리의 필요성을 깨닫게 되었습니다.

프리코스 과정에서 가장 큰 변화와 깨달음은 요구사항을 맞추는 데에만 집중하던 방식에서 벗어나 코드가 가지는 의도와 목적을 좀 더 명확히 이해하고 구현하는 방법을 고민하게 된 점입니다.
특히 아래와 같은 프리코스의 요구사항들은 큰 도움이 되었습니다.

들여쓰기 Depth 제한: 최대 2단계까지만 허용하라는 요구사항은 메서드를 작고 명확하게 분리해야 한다는 것을 가르쳐 주었고 이는 단일 책임 원칙을 지키는 첫걸음이었습니다
조건문의 단순화: 복잡한 로직 대신 간결한 if문과 메서드 분리를 통해 의도를 명확히 하고 3항 연산자를 배제하며 코드의 가독성을 높이는 연습을 할 수 있었습니다
테스트 코드 작성: JUnit 5와 AssertJ를 활용해 테스트 코드를 작성하며 테스트 주도 개발 TDD의 필요성과 테스트의 중요성을 배울 수 있었습니다. 코드의 결과를 즉각 확인하고 안정성을 보장할 수 있어 구현한 코드의 신뢰성을 높일 수 있었습니다
이를 통해 객체지향적인 설계 방식이 가지는 의미를 실질적으로 체감할 수 있었고 기능이 분리된 깔끔한 코드는 읽기 쉽고 재활용이 가능하며 코드 간의 결합도가 낮아 유지보수와 협업이 수월하다는 것을 깨달았습니다.

따라서 앞으로는 프리코스의 목표를 기초에 충실하면서 객체지향적으로 설계하고 코드를 작성하는 방향으로 변경하려고 합니다. 최종적으로는 효율적이고 안정적인 코드를 작성하는 것이 목표이지만 기초적인 객체지향 설계를 체득하는 것이 이 목표에 도달하기 위한 첫걸음임을 확신하게 되었습니다.

이번 주 프리코스를 통해 얻은 가장 큰 교훈은 잘 짜여진 코드는 재활용이 용이하고 복잡하게 엮여 있지 않다는 점입니다. 앞으로도 이러한 방향을 유지하며 남이 보기에도 깔끔하고 의도가 명확한 코드를 작성할 수 있도록 노력하고자 합니다.